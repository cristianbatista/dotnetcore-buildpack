#!/usr/bin/env bash

function install_dotnet() {
  local BUILD_DIR="$1"
  local CACHE_DIR="$2"
  local ZIP_NAME="dotnet-2.1.4.tar.gz"

  if [ ! -f $CACHE_DIR/$ZIP_NAME ]; then
    # https://github.com/dotnet/core/blob/master/release-notes/download-archives/2.0.5.md
    curl -SL --output $CACHE_DIR/$ZIP_NAME https://dotnetcli.blob.core.windows.net/dotnet/Sdk/2.1.401/dotnet-sdk-2.1.401-linux-x64.tar.gz  && dotnet_sha512='639f9f68f225246d9cce798d72d011f65c7eda0d775914d1394df050bddf93e2886555f5eed85a75d6c72e9063a54d8aa053c64c326c683b94e9e0a0570e5654'
  else
    echo "$ZIP_NAME from cache folder"
  fi

  mkdir -p ${BUILD_DIR}/.heroku/dotnet && tar zxf $CACHE_DIR/$ZIP_NAME -C ${BUILD_DIR}/.heroku/dotnet
  ln -s ${BUILD_DIR}/.heroku/dotnet /app
}

# https://github.com/ddollar/heroku-buildpack-apt
function topic() {
  echo "-----> $*"
}

function indent() {
  c='s/^/       /'
  case $(uname) in
    Darwin) sed -l "$c";;
    *)      sed -u "$c";;
  esac
}

function apt_install(){
  echo "Install package"

  local apt_cache_dir="$CACHE_DIR/apt/cache"
  local apt_state_dir="$CACHE_DIR/apt/state"
  
  mkdir -p "$apt_cache_dir/archives/partial"
  mkdir -p "$apt_state_dir/lists/partial"
  
  local apt_options="-o debug::nolocking=true -o dir::cache=$apt_cache_dir -o dir::state=$apt_state_dir"
  
  topic "Cleaning apt caches"
  apt-get $apt_options clean | indent
  
  topic "Updating apt caches"
  apt-get  --allow-unauthenticated $apt_options update | indent

  for package in "$@"; do
    if [[ $package == *deb ]]; then
      local package_name=$(basename $package .deb)
      local package_file=$apt_cache_dir/archives/$package_name.deb
      topic "Fetching $package"
      curl -s -L -z $package_file -o $package_file $package 2>&1 | indent
    else
      topic "Fetching .debs for $package"
      apt-get $apt_options -y -d install --reinstall $package | indent
    fi
  done
  
  mkdir -p "$BUILD_DIR/.apt"

  for DEB in $(ls -1 $apt_cache_dir/archives/*.deb); do
    topic "Installing $(basename $DEB)"
    dpkg -x $DEB "$BUILD_DIR/.apt/"
  done
  
  export PATH="$PATH:$BUILD_DIR/.apt/usr/bin"
  export LD_LIBRARY_PATH="$BUILD_DIR/.apt/usr/lib/x86_64-linux-gnu:$BUILD_DIR/.apt/usr/lib/i386-linux-gnu:$BUILD_DIR/.apt/usr/lib:${LD_LIBRARY_PATH-}"
  export LIBRARY_PATH="$BUILD_DIR/.apt/usr/lib/x86_64-linux-gnu:$BUILD_DIR/.apt/usr/lib/i386-linux-gnu:$BUILD_DIR/.apt/usr/lib:${LIBRARY_PATH-}"
  export INCLUDE_PATH="$BUILD_DIR/.apt/usr/include:${INCLUDE_PATH-}"
  export CPATH="${INCLUDE_PATH-}"
  export CPPPATH="${INCLUDE_PATH-}"
  export PKG_CONFIG_PATH="$BUILD_DIR/.apt/usr/lib/x86_64-linux-gnu/pkgconfig:$BUILD_DIR/.apt/usr/lib/i386-linux-gnu/pkgconfig:$BUILD_DIR/.apt/usr/lib/pkgconfig:${PKG_CONFIG_PATH-}"
  echo "APT packages Installled"
}

function install_newrelic() {
  local BUILD_DIR="$1"
  local CACHE_DIR="$2"
  local ZIP_NAME="newrelic-netcore20-agent_8.6.45.0_amd64.tar.gz"
  
  if [ ! -f $CACHE_DIR/$ZIP_NAME ]; then
    curl -sSL -o $CACHE_DIR/$ZIP_NAME http://download.newrelic.com/dot_net_agent/previous_releases/8.6.45.0/newrelic-netcore20-agent_8.6.45.0_amd64.tar.gz
  else
    echo "$ZIP_NAME from cache folder"
  fi

  mkdir -p ${BUILD_DIR}/heroku_output/newrelic && tar zxf $CACHE_DIR/$ZIP_NAME -C ${BUILD_DIR}/heroku_output/newrelic
}


export_env_dir() {
  local env_dir=$1
  if [ -d "$env_dir" ]; then
    local whitelist_regex=${2:-''}
    local blacklist_regex=${3:-'^(PATH|GIT_DIR|CPATH|CPPATH|LD_PRELOAD|LIBRARY_PATH|LANG)$'}
    if [ -d "$env_dir" ]; then
      for e in $(ls $env_dir); do
        echo "$e" | grep -E "$whitelist_regex" | grep -qvE "$blacklist_regex" &&
        export "$e=$(cat $env_dir/$e)"
        :
      done
    fi
  fi
}
